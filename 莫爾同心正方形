let X, Y; 
let speedX, speedY; 
let 半徑增加 = 18; // 半徑遞增
let squareNumber = 18; 
let changeDirectionInterval = 60; // 60幀改變方向
let frameCount = 0; // 計算幀數

function setup() {
  createCanvas(660, 660);
  noFill(); 
  strokeWeight(2); 
  X = width / 2;
  Y = height / 2;
  speedX = random(-0.5, 0.5); // X 軸速度
  speedY = random(-0.5, 0.5); // Y 軸速度
}

function draw() {
  background(180);

  // 藍色正方形的圓心位置
  X += speedX;
  Y += speedY;

  // 碰到邊界反彈
  let 最大半徑 = 半徑增加 * squareNumber;
  if (dist(X, Y, width / 2, height / 2) > 最大半徑) {
    speedX *= -1;
    speedY *= -1;
  }

  // 隨機改變方向
  frameCount++;
  if (frameCount % changeDirectionInterval === 0) {
    speedX = constrain(speedX + random(-0.2, 0.2), -1, 1);
    speedY = constrain(speedY + random(-0.2, 0.2), -1, 1);
  }

  // 繪製綠色正方形
  stroke(0, 155, 0); // 綠色
  for (let i = 0; i < squareNumber; i++) {
    let radius = 半徑增加 * (i + 1);
    drawSquare(width / 2, height / 2, radius); // 固定在畫布中心
  }

  // 繪製藍色正方形
  stroke(0, 0, 255); // 藍色
  for (let i = 0; i < squareNumber; i++) {
    let radius = 半徑增加 * (i + 1);
    drawSquare(X, Y, radius); // 隨著 X 和 Y 移動
  }
}

// 正方形的函數
function drawSquare(cx, cy, radius) {
  // 計算正方形的四個頂點
  let angleOffset = -PI / 4; // 讓正方形的頂點朝上
  let x1 = cx + cos(angleOffset) * radius;
  let y1 = cy + sin(angleOffset) * radius;
  let x2 = cx + cos(angleOffset + HALF_PI) * radius;
  let y2 = cy + sin(angleOffset + HALF_PI) * radius;
  let x3 = cx + cos(angleOffset + PI) * radius;
  let y3 = cy + sin(angleOffset + PI) * radius;
  let x4 = cx + cos(angleOffset + (3 * HALF_PI)) * radius;
  let y4 = cy + sin(angleOffset + (3 * HALF_PI)) * radius;

  // 讓正方形空心
  beginShape();
  vertex(x1, y1);
  vertex(x2, y2);
  vertex(x3, y3);
  vertex(x4, y4);
  endShape(CLOSE);
}
